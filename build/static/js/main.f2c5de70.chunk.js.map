{"version":3,"sources":["logo.svg","actions/countAction.js","post/index.js","actions/postAction.js","actions/promiseActions.js","PostComponet.js","pages/StateComponent.js","pages/ErrorBoundary.js","pages/ChildrenComponent.js","pages/VisibleComponent.js","pages/TestVisible.js","App.js","serviceWorker.js","reduces/postReducer.js","reduces/counterReducer.js","reduces/reduces.js","store/store.js","index.js"],"names":["module","exports","addAction","type","payload","count","axios","baseURL","postList","url","postAction","promiseAction","Promise","resolve","reject","then","data","console","info","content","PostComponent","createAction","props","addCounter","addDispatch","promisePostList","this","addCount","onClick","post","map","item","key","id","name","Component","connect","state","ownProps","postReducer","counterReducer","dispatch","a","async","result","StateComponent","updateState","setState","promiseUpdateState","prevProps","prevState","snapshot","ErrorBoundary","hasError","error","errorInfo","children","ChildrenComponent","VisibleComponent","visible","message","TestVisible","showOrNot","App","className","src","logo","alt","href","target","rel","value","Boolean","window","location","hostname","match","handleActions","POST_LIST","action","rootReduces","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","promiseMiddleware","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2c5de70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const addAction = {\n  type: 'ADD',\n  payload: {\n    count: 5\n  }\n}\nexport default addAction\n","import * as axios from \"axios\";\n\naxios.defaults.baseURL = 'http://localhost:3000'\nconst postList = () => {\n  return axios({\n      url: '/getList'\n    }\n  )\n}\nexport default postList\n","import postList from \"../post\";\n\nconst postAction = (payload) => ({\n  type: 'POST_LIST',\n  payload\n})\nexport const postAsync =() => {\n  return async dispatch =>{\n    const result = await postList()\n    console.info('result', result)\n    dispatch(postAction(result.data.content))\n  }\n}\nexport default postAction\n","import postList from \"../post\";\nimport postAction from \"../actions/postAction\";\nimport { createAction } from \"redux-actions\";\n\n// const promiseAction = () => {\n//   return new Promise((resolve, reject) => {\n//     const result = postList()\n//     result.then((data) => {\n//       console.info(data)\n//       resolve(postAction(data.data.content))\n//     })\n//   })\n// }\nconst promiseAction = () => {\n  return {\n    type:'POST_LIST',\n    payload:new Promise((resolve, reject) => {\n      const result = postList()\n      result.then((data) => {\n        console.info(data)\n        resolve(data.data.content)\n      })\n    })\n  }\n}\nexport default promiseAction\n\nexport const createPromiseAction =createAction('POST_LIST',() => {\n  return new Promise((resolve, reject) => {\n    postList().then((data) => {\n      console.info(data)\n      resolve(data.data.content)\n    })\n  })\n})\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport addAction from \"./actions/countAction\";\nimport postList from \"./post\";\nimport postAction, { postAsync } from \"./actions/postAction\";\nimport promiseAction ,{ createPromiseAction } from \"./actions/promiseActions\";\n\nclass PostComponent extends Component {\n  constructor (props) {\n    super(props)\n    console.info(props)\n  }\n\n  componentDidMount () {\n\n  }\n\n  addCounter = () => {\n    this.props.addDispatch()\n  }\n  postList = () => {\n    this.props.postList()\n  }\n  promisePostList = () => {\n    this.props.promisePostList()\n  }\n\n  render () {\n    console.info(this.props)\n    return (\n      <div>\n        <span>{this.props.addCount.count}</span>\n        <button onClick={this.addCounter}>增加1</button>\n        <button onClick={this.postList}>postList</button>\n        <button onClick={this.promisePostList}>promisePostList</button>\n        <ul>\n          {this.props.post.postList.map((item) => {\n            return (\n              <li key={item.id}>{item.name}</li>\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  console.info('mapStateToProps', state)\n  return {\n    post: state.postReducer,\n    addCount: state.counterReducer\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addDispatch: () => {\n      dispatch(addAction)\n    },\n    postList: () => {\n      dispatch(postAsync())\n    },\n    promisePostList: () => {\n      dispatch(promiseAction())\n    }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(PostComponent)\n","import React, { Component } from \"react\";\n\nexport default class StateComponent extends Component {\n\n  constructor (props) {\n    super(props);\n    console.info('StateComponent', 'constructor')\n    this.state = {\n      count: 1\n    }\n  }\n\n  static getDerivedStateFromProps (props) {\n    console.info('StateComponent', 'getDerivedStateFromProps')\n    const { count } = props\n    if (count) {\n      return { count }\n    }\n    return null\n  }\n\n  render () {\n    const { count } = this.state\n    return (\n      <div>\n        <span>{count}</span>\n        <button onClick={this.updateState}>点我啊改变state</button>\n        <button onClick={this.promiseUpdateState}>promise点击改变state</button>\n      </div>\n    )\n  }\n\n  getSnapshotBeforeUpdate (prevProps, prevState) {\n    console.info('StateComponent', 'getSnapshotBeforeUpdate')\n    return {\n      count: 10\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState, snapshot) {\n    console.info('StateComponent', 'componentDidUpdate', snapshot, this.state.count)\n  }\n\n  updateState = () => {\n    this.setState({ count: this.state.count + 1 })\n    this.setState({ count: this.state.count + 1 })\n    this.setState({ count: this.state.count + 1 })\n    console.info('StateComponent', 'updateState', this.state.count)\n  }\n  promiseUpdateState = () => {\n    Promise.resolve().then(() => {\n      this.setState({ count: this.state.count + 1 })\n      this.setState({ count: this.state.count + 1 })\n      this.setState({ count: this.state.count + 1 })\n      console.info('StateComponent', 'promiseUpdateState', this.state.count)\n    })\n\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch (error, errorInfo) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    if(this.state.hasError){\n      return (\n        <h1>Something went wrong</h1>\n      )\n    }\n    return this.props.children\n  }\n\n}\n","import { Component } from \"react\";\n\nexport default class ChildrenComponent extends Component{\n  render () {\n    return this.props.children(1)\n  }\n}\n","import { Component } from \"react\";\n\nexport default class VisibleComponent extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      visible: props.visible || false,\n      message: 'message'\n    }\n  }\n\n  static getDerivedStateFromProps (props, state) {\n    const { visible } = props\n    console.info(props, state)\n  }\n\n  render () {\n    return this.props.children\n  }\n\n}\n","import React, { Component } from \"react\";\nimport VisibleComponent from \"./VisibleComponent\";\n\nexport default class TestVisible extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      visible: true\n    }\n  }\n\n  render () {\n    return (\n      <div>\n        <button onClick={this.showOrNot}>显示或者隐藏</button>\n        <VisibleComponent visible={this.state.visible}>\n          <h1>我就是我，不一样的我</h1>\n        </VisibleComponent>\n      </div>\n\n    )\n  }\n\n  showOrNot = () => {\n    this.setState({ visible: !this.state.visible })\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PostComponent from \"./PostComponet\";\nimport StateComponent from \"./pages/StateComponent\";\nimport ErrorBoundary from \"./pages/ErrorBoundary\";\nimport ChildrenComponent from \"./pages/ChildrenComponent\";\nimport TestVisible from \"./pages/TestVisible\";\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <PostComponent/>\n        <StateComponent/>\n        <ErrorBoundary>\n          hah\n        </ErrorBoundary>\n        <ChildrenComponent>\n          {(value) => {\n            return <h1>你很优秀{value}</h1>\n          }}\n        </ChildrenComponent>\n        <TestVisible/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { handleActions } from \"redux-actions\";\n\n// const postReducer = function (state = { postList: [] }, action) {\n//   switch (action.type) {\n//     case 'POST_LIST':\n//       return {\n//         ...state,\n//         postList: action.payload\n//       }\n//     default :\n//       return state\n//   }\n// }\n// export default postReducer\nconst postReducer = handleActions({\n  POST_LIST (state, action) {\n    return {\n      ...state,\n      postList: action.payload\n    }\n  }\n}, {\n  postList: []\n})\n\nexport default postReducer\n","const counterReducer = function (state = { count: 1 }, action) {\n  switch (action.type) {\n    case 'ADD':\n      return {\n        ...state,\n        count: state.count + 1\n      }\n    default:\n      return state\n  }\n}\nexport default counterReducer\n","import { combineReducers } from \"redux\";\nimport postReducer from \"./postReducer\";\nimport counterReducer from \"./counterReducer\";\n\nconst rootReduces = combineReducers({ postReducer, counterReducer })\nexport default rootReduces\n","import { applyMiddleware, createStore } from \"redux\";\nimport rootReduces from \"../reduces/reduces\";\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport promiseMiddleware from 'redux-promise'\n\nconst store = createStore(rootReduces,\n  composeWithDevTools(applyMiddleware(thunk, promiseMiddleware))\n);\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Provider from \"react-redux/es/components/Provider\";\nimport store from \"./store/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}