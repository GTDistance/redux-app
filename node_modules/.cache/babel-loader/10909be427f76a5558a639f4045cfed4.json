{"ast":null,"code":"/**\n * 在字符串中找出出现最多的字符\n * @param str\n * @returns {{maxValue: null, maxNum: number}}\n */\nfunction findMaxString(str) {\n  const strArr = [...str];\n  const storeObj = {};\n  const maxObj = {\n    maxNum: 0,\n    maxValue: null\n  };\n  strArr.forEach(item => {\n    storeObj[item] = storeObj[item] === undefined ? 1 : storeObj[item] + 1;\n\n    if (storeObj[item] > maxObj.maxNum) {\n      maxObj.maxNum = storeObj[item];\n      maxObj.maxValue = item;\n    }\n  });\n  return maxObj;\n}\n\nfunction unique(arr) {\n  const storeObj = {};\n  arr.forEach(item => {\n    storeObj[item] = 0;\n  });\n  return Object.keys(storeObj);\n}\n\nconst unique1 = arr => {\n  return arr.filter((ele, index, array) => {\n    return index === array.indexOf(ele);\n  });\n};\n\nconst unique2 = arr => {\n  return [...new Set(arr)];\n};\n\nconst unique3 = arr.reduce((map, item) => {\n  map[item] = 0;\n  return map;\n}, {});\nexport { findMaxString, unique };","map":{"version":3,"sources":["/Users/Thomas.Wang/Documents/前端/redux-app/src/util/arithmeticUtil.js"],"names":["findMaxString","str","strArr","storeObj","maxObj","maxNum","maxValue","forEach","item","undefined","unique","arr","Object","keys","unique1","filter","ele","index","array","indexOf","unique2","Set","unique3","reduce","map"],"mappings":"AAAA;;;;;AAKA,SAASA,aAAT,CAAwBC,GAAxB,EAA6B;AAC3B,QAAMC,MAAM,GAAG,CAAC,GAAGD,GAAJ,CAAf;AACA,QAAME,QAAQ,GAAG,EAAjB;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,CADK;AAEbC,IAAAA,QAAQ,EAAE;AAFG,GAAf;AAIAJ,EAAAA,MAAM,CAACK,OAAP,CAAgBC,IAAD,IAAU;AACvBL,IAAAA,QAAQ,CAACK,IAAD,CAAR,GAAiBL,QAAQ,CAACK,IAAD,CAAR,KAAmBC,SAAnB,GAA+B,CAA/B,GAAmCN,QAAQ,CAACK,IAAD,CAAR,GAAiB,CAArE;;AACA,QAAIL,QAAQ,CAACK,IAAD,CAAR,GAAiBJ,MAAM,CAACC,MAA5B,EAAoC;AAClCD,MAAAA,MAAM,CAACC,MAAP,GAAgBF,QAAQ,CAACK,IAAD,CAAxB;AACAJ,MAAAA,MAAM,CAACE,QAAP,GAAkBE,IAAlB;AACD;AACF,GAND;AAOA,SAAOJ,MAAP;AACD;;AAED,SAASM,MAAT,CAAiBC,GAAjB,EAAsB;AACpB,QAAMR,QAAQ,GAAG,EAAjB;AACAQ,EAAAA,GAAG,CAACJ,OAAJ,CAAaC,IAAD,IAAU;AACpBL,IAAAA,QAAQ,CAACK,IAAD,CAAR,GAAiB,CAAjB;AACD,GAFD;AAGA,SAAOI,MAAM,CAACC,IAAP,CAAYV,QAAZ,CAAP;AACD;;AAED,MAAMW,OAAO,GAAGH,GAAG,IAAI;AACrB,SAAOA,GAAG,CAACI,MAAJ,CAAW,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,KAAuB;AACvC,WAAOD,KAAK,KAAKC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAjB;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMI,OAAO,GAAGT,GAAG,IAAI;AACrB,SAAO,CAAC,GAAG,IAAIU,GAAJ,CAAQV,GAAR,CAAJ,CAAP;AACD,CAFD;;AAIA,MAAMW,OAAO,GAAGX,GAAG,CAACY,MAAJ,CAAW,CAACC,GAAD,EAAMhB,IAAN,KAAe;AACxCgB,EAAAA,GAAG,CAAChB,IAAD,CAAH,GAAY,CAAZ;AACA,SAAOgB,GAAP;AACD,CAHe,EAGb,EAHa,CAAhB;AAIA,SACExB,aADF,EAEEU,MAFF","sourcesContent":["/**\n * 在字符串中找出出现最多的字符\n * @param str\n * @returns {{maxValue: null, maxNum: number}}\n */\nfunction findMaxString (str) {\n  const strArr = [...str]\n  const storeObj = {}\n  const maxObj = {\n    maxNum: 0,\n    maxValue: null\n  }\n  strArr.forEach((item) => {\n    storeObj[item] = storeObj[item] === undefined ? 1 : storeObj[item] + 1\n    if (storeObj[item] > maxObj.maxNum) {\n      maxObj.maxNum = storeObj[item]\n      maxObj.maxValue = item\n    }\n  })\n  return maxObj\n}\n\nfunction unique (arr) {\n  const storeObj = {}\n  arr.forEach((item) => {\n    storeObj[item] = 0\n  })\n  return Object.keys(storeObj)\n}\n\nconst unique1 = arr => {\n  return arr.filter((ele, index, array) => {\n    return index === array.indexOf(ele)\n  })\n}\n\nconst unique2 = arr => {\n  return [...new Set(arr)]\n}\n\nconst unique3 = arr.reduce((map, item) => {\n  map[item] = 0\n  return map\n}, {})\nexport {\n  findMaxString,\n  unique\n}\n"]},"metadata":{},"sourceType":"module"}