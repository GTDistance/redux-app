{"ast":null,"code":"import _slicedToArray from \"/Users/Thomas.Wang/Documents/\\u524D\\u7AEF/redux-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Thomas.Wang/Documents/\\u524D\\u7AEF/redux-app/src/pages/ReactHookComponent.js\";\nimport React, { memo, useCallback, useEffect, useMemo, useState } from \"react\";\nimport ChildFuncCom from \"./ChildFuncCom\";\nimport useRandomColor from \"../components/useRandomColor\";\n\nfunction ReactHook() {\n  console.info('reactHook');\n\n  const _useState = useState({\n    count: 0\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        count = _useState2[0].count,\n        setState = _useState2[1];\n\n  const _useState3 = useState('Child组件'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        name = _useState4[0],\n        setName = _useState4[1];\n\n  useEffect(() => {\n    console.log('componentDidMount...');\n    console.log('componentDidUpdate...');\n    return () => {\n      console.log('componentWillUnmount...');\n    };\n  });\n  const childClick = useCallback(newName => {\n    setName(newName);\n  }, []);\n  const colors = ['blue', 'red', 'black', 'yellow'];\n\n  const _useRandomColor = useRandomColor(colors, 'red'),\n        _useRandomColor2 = _slicedToArray(_useRandomColor, 2),\n        color = _useRandomColor2[0],\n        changeColor = _useRandomColor2[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setState({\n      count: count + 1\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, count), React.createElement(\"button\", {\n    onClick: () => setState({\n      count: count - 1\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"-\"), React.createElement(ChildFuncCom, {\n    name: useMemo(() => ({\n      name,\n      color: name.indexOf('name') !== -1 ? 'red' : 'green'\n    }), [name]),\n    onClick: childClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      background: color\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"\\u6D4B\\u8BD5\\u81EA\\u5B9A\\u4E49Hook\"), React.createElement(\"button\", {\n    onClick: changeColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"\\u6539\\u53D8\\u989C\\u8272\")));\n}\n\nexport default memo(ReactHook);","map":{"version":3,"sources":["/Users/Thomas.Wang/Documents/前端/redux-app/src/pages/ReactHookComponent.js"],"names":["React","memo","useCallback","useEffect","useMemo","useState","ChildFuncCom","useRandomColor","ReactHook","console","info","count","setState","name","setName","log","childClick","newName","colors","color","changeColor","indexOf","background"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,SAAnC,EAA8CC,OAA9C,EAAuDC,QAAvD,QAAuE,OAAvE;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAEA,SAASC,SAAT,GAAsB;AACpBC,EAAAA,OAAO,CAACC,IAAR,CAAa,WAAb;;AADoB,oBAEUL,QAAQ,CAAC;AAAEM,IAAAA,KAAK,EAAE;AAAT,GAAD,CAFlB;AAAA;AAAA,QAEXA,KAFW,iBAEXA,KAFW;AAAA,QAEFC,QAFE;;AAAA,qBAGIP,QAAQ,CAAC,SAAD,CAHZ;AAAA;AAAA,QAGbQ,IAHa;AAAA,QAGPC,OAHO;;AAIpBX,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACM,GAAR,CAAY,sBAAZ;AACAN,IAAAA,OAAO,CAACM,GAAR,CAAY,uBAAZ;AACA,WAAO,MAAM;AACXN,MAAAA,OAAO,CAACM,GAAR,CAAY,yBAAZ;AACD,KAFD;AAGD,GANQ,CAAT;AAOA,QAAMC,UAAU,GAAGd,WAAW,CAAEe,OAAD,IAAa;AAC1CH,IAAAA,OAAO,CAACG,OAAD,CAAP;AACD,GAF6B,EAE3B,EAF2B,CAA9B;AAGA,QAAMC,MAAM,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,EAAyB,QAAzB,CAAf;;AAdoB,0BAeSX,cAAc,CAACW,MAAD,EAAS,KAAT,CAfvB;AAAA;AAAA,QAebC,KAfa;AAAA,QAeNC,WAfM;;AAgBpB,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAE,MAAMR,QAAQ,CAAC;AAAED,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,KAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,KAAP,CAFF,EAGE;AAAQ,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAAC;AAAED,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,KAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHF,EAME,oBAAC,YAAD;AACE,IAAA,IAAI,EACFP,OAAO,CAAC,OAAO;AACbS,MAAAA,IADa;AAEbM,MAAAA,KAAK,EAAEN,IAAI,CAACQ,OAAL,CAAa,MAAb,MAAyB,CAAC,CAA1B,GAA8B,KAA9B,GAAsC;AAFhC,KAAP,CAAD,EAGH,CAACR,IAAD,CAHG,CAFX;AAOE,IAAA,OAAO,EAAEG,UAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAeE;AAAK,IAAA,KAAK,EAAE;AAAEM,MAAAA,UAAU,EAAEH;AAAd,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADF,EAEE;AAAQ,IAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFF,CAfF,CADF;AAsBD;;AAED,eAAenB,IAAI,CAACO,SAAD,CAAnB","sourcesContent":["import React, { memo, useCallback, useEffect, useMemo, useState } from \"react\";\nimport ChildFuncCom from \"./ChildFuncCom\";\nimport useRandomColor from \"../components/useRandomColor\";\n\nfunction ReactHook () {\n  console.info('reactHook')\n  const [{ count }, setState] = useState({ count: 0 })\n  const [name, setName] = useState('Child组件')\n  useEffect(() => {\n    console.log('componentDidMount...')\n    console.log('componentDidUpdate...')\n    return () => {\n      console.log('componentWillUnmount...')\n    }\n  });\n  const childClick = useCallback((newName) => {\n    setName(newName)\n  }, [])\n  const colors = ['blue', 'red', 'black', 'yellow']\n  const [color, changeColor] = useRandomColor(colors, 'red')\n  return (\n    <div>\n      <button onClick={() => setState({ count: count + 1 })}>+</button>\n      <span>{count}</span>\n      <button onClick={() => setState({ count: count - 1 })}>-</button>\n      {/*<ChildFuncCom name={name} onClick={useCallback((newName) => setName(newName), [])}/>*/}\n      {/*<ChildFuncCom name={{ name, color: name.indexOf('name') !== -1 ? 'red' : 'green'}} onClick={childClick}/>*/}\n      <ChildFuncCom\n        name={\n          useMemo(() => ({\n            name,\n            color: name.indexOf('name') !== -1 ? 'red' : 'green'\n          }), [name])\n        }\n        onClick={childClick}/>\n      {/*<ChildFuncCom name={name} onClick={(newName) => setName(newName)}/>*/}\n      <div style={{ background: color }}>\n        <h1>测试自定义Hook</h1>\n        <button onClick={changeColor}>改变颜色</button>\n      </div>\n    </div>\n  )\n}\n\nexport default memo(ReactHook)\n"]},"metadata":{},"sourceType":"module"}